name: Java CI

on:
  push:
    branches: [ "master" ]
    paths:
      - 'Eindopdracht-1-accountservice/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Build with Maven
        working-directory: Eindopdracht-1-accountservice
        run: mvn -B install --file pom.xml

      - name: Code Analysis
        working-directory: Eindopdracht-1-accountservice
        run: |
          mvn sonar:sonar \
          -Dsonar.projectKey=eindopdracht-1-tygo-joost \
          -Dsonar.host.url=http://sonar.cloud-native-minor.it/ \
          -Dsonar.login=45d50dd41d616b6d7bcb94387588d9ea2a89c7da
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag and push the Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: account-ecr-repository
          IMAGE_TAG: v${{ github.run_number }}
        working-directory: Eindopdracht-1-accountservice
        run: |
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "pushed image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
      - name: Tag the build version
        run: |
          git tag "v${GITHUB_RUN_NUMBER}"
          git push origin "v${GITHUB_RUN_NUMBER}"
      - name: Deploy container on EC2
        working-directory: Eindopdracht-1-accountservice
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
          HOSTNAME : ${{ secrets.HOST_NAME_SECOND  }}
          USER_NAME : ${{ secrets.USER_NAME  }}
          ECR_REGISTRY: 566768521972.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: account-ecr-repository
          IMAGE_TAG: v${{ github.run_number }}
        run: |
          echo "${PRIVATE_KEY}" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} "
            echo \"Image to deploy: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}\"
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}/${ECR_REPOSITORY}
            docker rm -f Eindopdracht-1-accountservice
            docker run -d -p 8080:8080 -e SPRING_PROFILES_ACTIVE=prod --name Eindopdracht-1-accountservice ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} 
          "
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: v${{ github.run_number }}
          draft: false
          prerelease: false
